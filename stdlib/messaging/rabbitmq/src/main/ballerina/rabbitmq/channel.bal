// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/log;

# Public Ballerina API - Ballerina interface to an AMQP channel.
# To provide AMQ Channel related functionalities.
#
# + connection - Reference to a Ballerina RabbitMQ Connection.
public type Channel client object {

    Connection? connection;

    # Initializes a Ballerina Channel object with the given Connection object or connection parameters.
    # Creates a Connection object if only the connection configuration is given.
    #
    # + connectionOrConnectionConfig - Holds a Ballerina RabbitMQ Connection object or the connection parameters.
    public function __init(ConnectionConfiguration|Connection connectionOrConnectionConfig) {
        if (connectionOrConnectionConfig is Connection) {
            self.connection = connectionOrConnectionConfig;
        } else {
            self.connection = new Connection(connectionOrConnectionConfig);
        }
        self.createChannel(self.connection);
    }

    # Internally creates a AMQ channel.
    #
    # + connection - Ballerina RabbitMQ Connection object
    extern function createChannel(Connection? connection);

    # Actively declare a server-named exclusive, autodelete, non-durable queue or queue with the given configurations.
    #
    # + config - Holds paramters to declare a queue
    # + return - Returns the name of the queue if autogenerated or and error if an error is encountered or nil if
    #               successful
    public remote extern function queueDeclare(QueueConfiguration queueConfig) returns string|error?;

    # Actively declare a non-autodelete, non-durable exchange with no extra arguments, If the arguments are specifed,
    # then the exchange is declared accordingly.
    #
    # + config - Holds parameters required to declare an exchange
    # + return - Returns an error if an error is encountered or nil if successful
    public remote extern function exchangeDeclare(ExchangeConfiguration config) returns error?;

    # Binds a queue to an exchange with the given binding key.
    #
    # + queueName - Name of the queue
    # + exchangeName - Name of the exchange
    # + bindingKey - Binding key used to bind the queue to the exchange
    # + return - Returns an error if an error is encountered or nil if successful
    public remote extern function queueBind(string queueName, string exchangeName, string bindingKey) returns error?;

    # Publishes a message. Publishing to a non-existent exchange will result in a channel-level
    # protocol exception, which closes the channel.
    #
    # + routingKey - The routing key
    # + message - The message body
    # + exchange - The name of the exchange the message is published to
    # + mandatory - True if the 'mandatory' flag is to be set
    # + immediate - True if the 'immediate' flag is to be set
    # + return - Returns an error if an error is encountered or nil if successful
    public remote extern function basicPublish(string routingKey = "", string message = "", string exchange = "")
                                      returns error?;
    //   boolean? mandatory = false, boolean? immediate = false

    # Delete a queue, without regard for whether it is in use or has messages on it, If the paramters ifUnused or
    # ifEmpty is given, checked before deleting.
    #
    # + queueName - Name of the queue to be deleted
    # + ifUnused - True if the queue should be deleted only if not in use
    # + ifEmpty -  True if the queue should be deleted only if empty
    # + return - Returns error if an error is encountered or nil if successful
    public remote extern function queueDelete(string queueName, boolean? ifUnused = false, boolean? ifEmpty = false)
                                      returns error?;
};
